game design doc.
quick facts:
i want to be done with this in a weekish.

the idea is:

irl:
scarce natural resources
survival requires transforming natural resources
exploration and/or violence are used to expand resource access
fixed + variable production costs
technological progress increases production, shifts burden to fixed costs

in game, same ideas.
likely will be a ~1000x1000 grid of autogenerated terrain.
50x50 or so viewport of the world (fog of war).
the inhabitants of the world will be LLMs. something like 5-20x players per 'cluster', with a few clusters/world.
the LLMs will start with either a specific prompt or be left to their own devices.
the goal is to produce interesting/fun micro/macro situations.
watch as on the small scale, towns form and disband, players form relationships and search for meaning.
on the large scale, maybe certain clusters of players realize they need to progress down the tech tree for fear of violent invasion from other resource-hungry towns.
game time will progress in tick-based increments.
players (models) can initiate actions that take varying lengths of in-game time.
llm actions should happen ~simultaneously, unless their actions clash over a shared resource, or in combat.
combat will not be the main focus, but is a realistic aspect of society building that would be a huge omission.
something like risk-like dice rolls, where damage is done based on the quality of weaponry equipped.



tiles:
grassland, forest, desert, mountain, ore, water


structures/entities:
farm:
    requires:
        grassland + mats
    stats:
        health, yield, growth
    actions:
        tend, harvest -> food

mine:
    requires:
        ore + mats
    stats:
        richness, yield, efficiency
    actions:
        extract -> metals

warehouse:
    stats:
        capacity
    actions:
        store, retrieve

road:
    requires:
        mats

buildings/products:
tier 1 factory:
    requires:
        tier 1 mats
    recipes:
        production 1: (metals/timber -> equipment, goods)
        production 2: (metals/timber -> equipment, goods)
        production 2: (metals/timber -> equipment, goods)

armory:
    requires:
        equipment, goods
    recipes:
        work -> (metals/timber -> weaponry)

house:
    requires:
        tools, goods (many)
    stats:
        occupancy (aka cooldown on reproducing)
    actions:
        reproduce -> (2x player -> 3x player)

library:
    requires:
        tools, goods
    stats:
        occupancy (more people per library -> faster tech unlocks; sigmoidal)
    actions:
        study -> lvl up knowledge; learn recipe for better buildings

sample game
    'forage' in forest & ore patches to get a few timber/metals
    'forage' will also net a tiny amount of food to avoid pre-farm starving
    craft primitive tools (doesn't need building)
    use primitive tools to build a farm, start tending it
    use primitive tools to build a mine
    generate more metals from the new mines
    generate more timber by 'harvesting' in a forest with actual tools
    build a primitive civilian factory to produce tools more efficiently, also unlocks goods
    use newly generated goods to build houses, start growing population
    continue gathering resources
    build library and dedicate someone to start skilling up the tech tree
    make better tools in current tier factory
    choose b/w upgrading mines/farms/factories/armories or building roads
    trade with other individuals or bands of players 
    repeat

technical needs/concerns:
    1. the entire game state needs to be projectable into text-space for LLMs
    2. we need to support serializing/deserializing potentially on the order of 1M tiles
    3. most of the wall clock time will be spent waiting for LLM replies, so perf is secondary
    4. the code should be easily extensible so we can add future game mechanics
    5. we need to deal with potentially on the order of hundreds of LLM players
        a. we may be able to optimistically query >1 lm's for action choice at state S, retrying on conflict


